float3 GetVolumetricLightmapAmbient(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_VolumetricLightmapBrickAmbientVector, View_SharedBilinearClampedSampler, BrickTextureUVs, 0).xyz;
}
void GetVolumetricLightmapSHCoefficients0(float3 BrickTextureUVs, out float3 AmbientVector, out float4 SHCoefficients0Red, out float4 SHCoefficients0Green, out float4 SHCoefficients0Blue)
{
	AmbientVector = GetVolumetricLightmapAmbient(BrickTextureUVs);
	SHCoefficients0Red = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients0, View_SharedBilinearClampedSampler, BrickTextureUVs, 0) * 2 - 1;
	SHCoefficients0Green = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients2, View_SharedBilinearClampedSampler, BrickTextureUVs, 0) * 2 - 1;
	SHCoefficients0Blue = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients4, View_SharedBilinearClampedSampler, BrickTextureUVs, 0) * 2 - 1;
	float4 SHDenormalizationScales0 = float4(
		0.488603f / 0.282095f, 
		0.488603f / 0.282095f, 
		0.488603f / 0.282095f, 
		1.092548f / 0.282095f);
	SHCoefficients0Red = SHCoefficients0Red * AmbientVector.x * SHDenormalizationScales0;
	SHCoefficients0Green = SHCoefficients0Green * AmbientVector.y * SHDenormalizationScales0;
	SHCoefficients0Blue = SHCoefficients0Blue * AmbientVector.z * SHDenormalizationScales0;
}
FThreeBandSHVectorRGB GetVolumetricLightmapSH3(float3 BrickTextureUVs)
{
	float3 AmbientVector;
	float4 SHCoefficients0Red;
	float4 SHCoefficients0Green;
	float4 SHCoefficients0Blue;
	GetVolumetricLightmapSHCoefficients0(BrickTextureUVs, AmbientVector, SHCoefficients0Red, SHCoefficients0Green, SHCoefficients0Blue);
	float4 SHCoefficients1Red = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients1, View_SharedBilinearClampedSampler, BrickTextureUVs, 0) * 2 - 1;
	float4 SHCoefficients1Green = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients3, View_SharedBilinearClampedSampler, BrickTextureUVs, 0) * 2 - 1;
	float4 SHCoefficients1Blue = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients5, View_SharedBilinearClampedSampler, BrickTextureUVs, 0) * 2 - 1;
	float4 SHDenormalizationScales1 = float4(
		1.092548f / 0.282095f,
		4.0f * 0.315392f / 0.282095f,
		1.092548f / 0.282095f,
		2.0f * 0.546274f / 0.282095f);
	SHCoefficients1Red = SHCoefficients1Red * AmbientVector.x * SHDenormalizationScales1;
	SHCoefficients1Green = SHCoefficients1Green * AmbientVector.y * SHDenormalizationScales1;
	SHCoefficients1Blue = SHCoefficients1Blue * AmbientVector.z * SHDenormalizationScales1;
	FThreeBandSHVectorRGB IrradianceSH;
	IrradianceSH.R.V0 = float4(AmbientVector.x, SHCoefficients0Red.xyz);
	IrradianceSH.R.V1 = float4(SHCoefficients0Red.w, SHCoefficients1Red.xyz);
	IrradianceSH.R.V2 = SHCoefficients1Red.w;
	IrradianceSH.G.V0 = float4(AmbientVector.y, SHCoefficients0Green.xyz);
	IrradianceSH.G.V1 = float4(SHCoefficients0Green.w, SHCoefficients1Green.xyz);
	IrradianceSH.G.V2 = SHCoefficients1Green.w;
	IrradianceSH.B.V0 = float4(AmbientVector.z, SHCoefficients0Blue.xyz);
	IrradianceSH.B.V1 = float4(SHCoefficients0Blue.w, SHCoefficients1Blue.xyz);
	IrradianceSH.B.V2 = SHCoefficients1Blue.w;
	return IrradianceSH;
}